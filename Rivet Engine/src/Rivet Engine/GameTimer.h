#ifndef GameTimer_H
#define GameTimer_H

#include "FreezeTime.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	GameTimer
///
/// \brief	A time utility for games made using Rivet Engine.
///
/// \author	Mike Piunti
/// \date	02/28/2023
////////////////////////////////////////////////////////////////////////////////////////////////////
class GameTimer {
	friend class TimeAttorney;

private:
	GameTimer();
	GameTimer(const GameTimer&) = delete;
	GameTimer& operator=(const GameTimer&) = delete;
	~GameTimer() = default;

	/// \brief	The current timer instance.
	static GameTimer* instance;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static GameTimer* GameTimer::Instance();
	///
	/// \brief	Gets the current timer instance. Creates a new instance if none exists.
	///
	/// \returns	The current timer instance.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static GameTimer* Instance();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static void GameTimer::Terminate();
	///
	/// \brief	Terminates the game timer.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static void Terminate();

	/// \brief	The freeze frame timer used to handle freeze frame mode.
	FreezeTime freeze;

	/// \brief	The current elapsed time, without correction for freeze frame mode.
	float currentTime;

	/// \brief	The amount of time passed this frame.
	float frameTime;

	/// \brief	The previous elapsed time, corrected for freeze frame mode.
	float prevTime;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static void GameTimer::ProcessTime(const float sys_time);
	///
	/// \brief	Calculates the current game time using system time.
	///
	/// \param 	sys_time	The system time.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static void ProcessTime(const float sys_time);

public:
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static float GameTimer::GetFrameTime();
	///
	/// \brief	Gets the amount of time passed this frame.
	///
	/// \returns	The frame time, in seconds, or 1/60 if frame skip was just used.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static float GetFrameTime();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static float GameTimer::GetElapsedTime();
	///
	/// \brief	Gets total elapsed time, corrected for freeze frame mode.
	///
	/// \returns	The elapsed time.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static float GetElapsedTime();
};

#endif
