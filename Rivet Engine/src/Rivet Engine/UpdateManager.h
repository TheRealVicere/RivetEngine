#ifndef UpdateManager_H
#define UpdateManager_H

#include <list>

class UpdateComponent;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	UpdateManager
///
/// \brief	Manager for updating objects.
///
/// \author	Mike Piunti
/// \date	02/28/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class UpdateManager {
private:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \typedef	std::list<UpdateComponent*> StorageList
	///
	/// \brief	Defines an alias representing a list of objects to be updated.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	typedef std::list<UpdateComponent*> StorageList;

	/// \brief	The list of objects to be updated each frame.
	StorageList storageList;

public:
	UpdateManager() = default;
	UpdateManager(const UpdateManager&) = delete;
	UpdateManager operator=(const UpdateManager&) = delete;
	~UpdateManager();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \typedef	StorageList::iterator StorageListRef
	///
	/// \brief	Defines an alias representing an object's location on the update list.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	typedef StorageList::iterator StorageListRef;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void UpdateManager::ProcessElements();
	///
	/// \brief	Updates each object on the update list.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void ProcessElements();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	StorageListRef UpdateManager::Register(UpdateComponent* up);
	///
	/// \brief	Registers the given object for updating.
	///
	/// \param	up	The object to register for updating.
	///
	/// \returns	A reference to the object's location in the update list.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	StorageListRef Register(UpdateComponent* up);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void UpdateManager::Deregister(UpdateComponent* up);
	///
	/// \brief	Deregisters the given object for updating.
	///
	/// \param	up	The object to deregister for updating.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void Deregister(UpdateComponent* up);
};

#endif
