#ifndef AlarmComponent_H
#define AlarmComponent_H

#include "AlarmManager.h"
#include "Component.h"

class IAlarmCallback;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	AlarmComponent
///
/// \brief	Adds alarm functionality to game objects.
///
/// \author	Mike Piunti
/// \date	02/28/2023
////////////////////////////////////////////////////////////////////////////////////////////////////
class AlarmComponent : public Component {
	friend class AlarmAttorney;
public:
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	AlarmComponent::AlarmComponent(IAlarmCallback* cb);
	///
	/// \brief	Creates an alarm component using the given callback.
	///
	/// \param.	cb		The callback carrying out the actual update operation.
	/// \param	time	The time until the alarm triggers.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	AlarmComponent(IAlarmCallback* cb, const float time);

	AlarmComponent() = delete;
	AlarmComponent(const AlarmComponent&) = delete;
	AlarmComponent& operator=(const AlarmComponent&) = delete;
	~AlarmComponent() = default;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	float AlarmComponent::GetTriggerTime();
	///
	/// \brief	Returns the relative trigger time for the alarm.
	///
	/// \returns	The trigger time.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	float GetTriggerTime();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void AlarmComponent::SetTriggerTime(const float time);
	///
	/// \brief	Sets a new trigger time for an alarm reset.
	///
	/// \param 	time	The new trigger time.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetTriggerTime(const float time);

private:
	/// \brief	The callback carrying out an alarm's actions.
	IAlarmCallback* callback;

	/// \brief	The relative trigger time for this alarm.
	float triggerTime;

	/// \brief	A reference to the alarm's location on the timeline for efficient deletion.
	AlarmManager::TimelineRef ref;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	AlarmManager::TimelineRef& AlarmComponent::GetTimelineRef();
	///
	/// \brief	Gets a reference to an alarm's location on the timeline for efficient deletion.
	///
	/// \returns	The timeline reference.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	AlarmManager::TimelineRef& GetTimelineRef();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	virtual void AlarmComponent::Alarm()
	///
	/// \brief	Calls the alarm in this component's callback.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void Alarm();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void AlarmComponent::OnRegistration();
	///
	/// \brief	Registers this alarm.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void OnRegistration();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void AlarmComponent::OnDeregistration();
	///
	/// \brief	Deregisters this alarm.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void OnDeregistration();
};

#endif
