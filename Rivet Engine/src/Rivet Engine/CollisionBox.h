#ifndef CollisionBox_H
#define CollisionBox_H

#include "Matrix.h"

#include "CollisionVolume.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	CollisionBox
///
/// \brief	A box surrounding an object with collision functionality. Used for collision testing.
///
/// \author	Mike Piunti
/// \date	04/17/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class CollisionBox : public CollisionVolume {
public:
	CollisionBox();
	CollisionBox(const CollisionBox& other);
	CollisionBox& operator=(const CollisionBox& other);
	virtual ~CollisionBox() = default;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	const Vect& CollisionBox::Min();
	///
	/// \brief	Returns the minimum point of the collision box.
	///
	/// \returns	The minimum point.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	const Vect& Min() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	const Vect& CollisionBox::Max();
	///
	/// \brief	Returns the maximum point of the collision box.
	///
	/// \returns	The maximum point.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	const Vect& Max() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	const Vect& CollisionBox::HalfDiag() const;
	///
	/// \brief	Returns the half diagonal of the collision box.
	///
	/// \returns	The half diagonal.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	const Vect& HalfDiag() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	const Vect& CollisionBox::Center() const;
	///
	/// \brief	Returns the center of the collision box.
	///
	/// \returns	The center.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	const Vect& Center() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	const Matrix& CollisionBox::World() const;
	///
	/// \brief	Returns the world matrix for the collision box.
	/// 
	/// \returns	The world matrix.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	const Matrix& World() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	const float CollisionBox::ScaleFactor() const;
	///
	/// \brief	Returns the scale factor of the collision box.
	/// 		This function assumes that the box has a uniform scale.
	///
	/// \returns	The scale factor.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	const float ScaleFactor() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	bool CollisionBox::Intersect(const CollisionBox& other) const;
	///
	/// \brief	Tests whether this collision box intersects another.
	///
	/// \param 	other	The other box to test for intersection.
	///
	/// \returns	True if the boxes intersect, false otherwise.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	bool Intersect(const CollisionBox& other) const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	virtual bool CollisionBox::Intersect(const BSphere& other) const = 0;
	///
	/// \brief	Tests whether this collision box intersects the given bounding sphere.
	///
	/// \param 	other	The sphere to test for intersection.
	///
	/// \returns	True if the volumes intersect, false otherwise.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool Intersect(const BSphere& other) const = 0;

protected:
	/// \brief	The world matrix for the collision box.
	Matrix world;

	/// \brief	The minimum point of the collision box.
	Vect min;

	/// \brief	The maximum point of the collision box.
	Vect max;

	/// \brief	The center of the collision box.
	Vect center;

	/// \brief	The half diagonal of the collision box.
	Vect halfDiag;

	/// \brief	The scale factor of the collision box. (Assumes uniform scale.)
	float scaleFactor;
};

#endif
