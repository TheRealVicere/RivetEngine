#ifndef UpdateComponent_H
#define UpdateComponent_H

#include "Component.h"
#include "UpdateManager.h"

class IUpdateCallback;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	UpdateComponent
///
/// \brief	Allows updating game object properties.
///
/// \author	Mike Piunti
/// \date	02/28/2023
////////////////////////////////////////////////////////////////////////////////////////////////////
class UpdateComponent : public Component {
	friend class UpdateAttorney;
public:
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	UpdateComponent::UpdateComponent(IUpdateCallback* cb);
	///
	/// \brief	Creates an update component using the given callback.
	///
	/// \param	cb	The callback carrying out the actual update operation.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	UpdateComponent(IUpdateCallback* cb);
	
	UpdateComponent() = delete;
	UpdateComponent(const UpdateComponent&) = delete;
	UpdateComponent& operator=(const UpdateComponent&) = delete;
	~UpdateComponent() = default;

private:
	/// \brief	The callback carrying out the actual update operation.
	IUpdateCallback* callback;

	/// \brief	A reference to the object's location on the update list for efficient deletion.
	UpdateManager::StorageListRef ref;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	UpdateManager::StorageListRef& UpdateComponent::GetStorageListRef();
	///
	/// \brief	Gets a reference to the object's location on the update list.
	///
	/// \returns	The update list reference.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	UpdateManager::StorageListRef& GetStorageListRef();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void UpdateComponent::OnRegistration();
	///
	/// \brief	Registers this object for updating.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void OnRegistration();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void UpdateComponent::OnDeregistration();
	///
	/// \brief	Deregisters this object for updating.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void OnDeregistration();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	virtual void UpdateComponent::Update()
	///
	/// \brief	Updates an object's properties as defined by the user.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void Update();
};

#endif
