#ifndef SceneRegistrationBroker_H
#define SceneRegistrationBroker_H

#include <list>

class Command;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	SceneRegistrationBroker
///
/// \brief	A broker used to execute scene registry commands.
///
/// \author	Mike Piunti
/// \date	02/28/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class SceneRegistrationBroker {
private:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \typedef	std::list<Command*> CommandList
	///
	/// \brief	Defines an alias representing a list of commands.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	typedef std::list<Command*> CommandList;

	/// \brief	The list of commands to execute.
	CommandList cmdList;

public:
	SceneRegistrationBroker() = default;
	SceneRegistrationBroker(const SceneRegistrationBroker&) = delete;
	SceneRegistrationBroker& operator=(const SceneRegistrationBroker&) = delete;
	~SceneRegistrationBroker();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void SceneRegistrationBroker::AddCommand(Command* c);
	///
	/// \brief	Adds a command to the command list.
	///
	/// \param	c	A command to execute next frame.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void AddCommand(Command* c);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void SceneRegistrationBroker::ExecuteAll();
	///
	/// \brief	Executes all commands in the list.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void ExecuteAll();
};

#endif
