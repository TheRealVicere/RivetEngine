#ifndef OBB_H
#define OBB_H

#include "CollisionBox.h"

class BSphere;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	OBB
///
/// \brief	A box oriented with an object with collision functionality. Used for collision testing.
///
/// \author	Mike Piunti
/// \date	04/17/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class OBB : public CollisionBox {
public:
	OBB();
	OBB(const CollisionBox& other);
	OBB& operator=(const CollisionBox& other);
	~OBB() = default;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void OBB::ComputeData(Model* mod, const Matrix& mat);
	///
	/// \brief	Calculates the data used to place the OBB correctly.
	///
	/// \param	mod	The object's collider model.
	/// \param 	mat	The object's world matrix.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void ComputeData(Model* mod, const Matrix& mat);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void OBB::DebugView(const Vect& col);
	///
	/// \brief	Renders the OBB to the display for debugging purposes.
	///
	/// \param 	col	The color used to render the OBB.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void DebugView(const Vect& col) const override;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	bool OBB::Intersect(const Vect& p) const;
	///
	/// \brief	Checks if a point lies within this OBB.
	///
	/// \param 	p	The point to test for intersection.
	///
	/// \returns	True if this OBB contains the point, false if not.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	bool Intersect(const Vect& p) const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	bool OBB::Intersect(const CollisionVolume& other) const;
	///
	/// \brief	Tests whether this OBB intersects another collision volume.
	///
	/// \param 	other	The other collision volume to test for intersection.
	///
	/// \returns	True if the volumes intersect, false otherwise.
	/////////////////////////////////////////////////////////////////////////////////////////////////
	bool Intersect(const CollisionVolume& other) const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	bool AABB::Intersect(const BSphere& other) const;
	///
	/// \brief	Tests whether this OBB intersects a bounding sphere.
	///
	/// \param 	other	The bounding sphere to test for intersection.
	///
	/// \returns	True if the volumes intersect, false otherwise.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	bool Intersect(const BSphere& other) const;
};

#endif
