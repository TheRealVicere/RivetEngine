#ifndef SceneManager_H
#define SceneManager_H

class Scene;
class SceneCommand;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	SceneManager
///
/// \brief	A manager for scene processing.
///
/// \author	Mike Piunti
/// \date	02/28/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class SceneManager {
	friend class SceneChangeAttorney;
private:
	SceneManager();
	SceneManager(const SceneManager&) = delete;
	SceneManager operator=(const SceneManager&) = delete;
	~SceneManager();

	/// \brief	The current manager instance.
	static SceneManager* instance;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static SceneManager* SceneManager::Instance();
	///
	/// \brief	Gets the current scene manager instance.  Creates a new one if none exists.
	///
	/// \returns	The scene manager instance.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	static SceneManager* Instance();

	/// \brief	The null command for changing scenes.
	SceneCommand* nullCommand;

	/// \brief	The command used to change scenes. Null when no scene change is prepared.
	SceneCommand* changeCommand;

	/// \brief	The current scene.
	Scene* current;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static void SceneManager::PrivSetNextScene(Scene* const ns);
	///
	/// \brief	Sets the next scene to be used.
	///
	/// \param	ns	The next scene to use.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static void PrivSetNextScene(Scene* const ns);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static void SceneManager::ChangeScene(Scene* const s);
	///
	/// \brief	Terminates the current scene and changes to the given scene.
	///
	/// \param	s	The scene to change to.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static void ChangeScene(Scene* const s);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static void SceneManager::ExecuteSceneChange();
	///
	/// \brief	Executes the scene change command. Does nothing if the change command is a NullSceneCommand.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static void ExecuteSceneChange();

public:
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static void SceneManager::Terminate();
	///
	/// \brief	Terminates the scene manager.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static void Terminate();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static void SceneManager::Draw();
	///
	/// \brief	Renders game objects within the current scene.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static void Draw();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static void SceneManager::Update();
	///
	/// \brief	Processes all registry commands, time commands, object updates, collision handling, scene
	/// 		changes, and inputs.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static void Update();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static Scene* SceneManager::GetCurrent();
	///
	/// \brief	Gets the current scene.
	///
	/// \returns	The current scene.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static Scene* GetCurrent();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static void SceneManager::InitStartScene();
	///
	/// \brief	Initializes the starting scene.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static void InitStartScene();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static void SceneManager::SetStartScene(Scene* const ss);
	///
	/// \brief	Sets the starting scene.
	///
	/// \param	ss	The starting scene.
	/// 			
	/// Users should call this function inside LoadAllResources.cpp with their desired start scene as
	/// the parameter.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static void SetStartScene(Scene* const ss);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static void SceneManager::SetNextScene(Scene* const ns);
	///
	/// \brief	Sets the next scene to be used.
	///
	/// \param	ns	The next scene to use.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static void SetNextScene(Scene* const ns);
};

#endif
