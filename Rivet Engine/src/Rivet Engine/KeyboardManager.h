#ifndef KeyboardManager_H
#define KeyboardManager_H

#include <list>
#include <map>

#include "Keyboard.h"

class InputComponent;
class KeyHandler;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	KeyboardManager
///
/// \brief	Manager for keyboard input.
///
/// \author	Mike Piunti
/// \date	02/28/2023
////////////////////////////////////////////////////////////////////////////////////////////////////
class KeyboardManager {
public:
	KeyboardManager() = default;
	KeyboardManager(const KeyboardManager&) = delete;
	KeyboardManager& operator=(const KeyboardManager&) = delete;
	~KeyboardManager();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \enum	EventType
	///
	/// \brief	Values that represent keyboard event types.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	enum class EventType {
		KeyReleased, KeyPressed
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \typedef	std::pair<AZUL_KEY, EventType> InputEvent
	///
	/// \brief	Defines an alias representing a specific key being pressed or released.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	typedef std::pair<AZUL_KEY, EventType> InputEvent;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \typedef	std::list<InputComponent*> InputList
	///
	/// \brief	Defines an alias representing list of objects with input listeners.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	typedef std::list<InputComponent*> InputList;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \typedef	InputList::iterator InputListRef
	///
	/// \brief	Defines an alias representing a reference to an object's location on the input list.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	typedef InputList::iterator InputListRef;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	InputListRef KeyboardManager::Register(InputComponent* in);
	///
	/// \brief	Sets a listener for the given component.
	///
	/// \param	in	The component needing the input listener.
	///
	/// \returns	The given object's location on the input list.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	InputListRef Register(InputComponent* in);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void KeyboardManager::Deregister(InputComponent* in);
	///
	/// \brief	Removes a listener for the given component.
	///
	/// \param	in	The component which no longer needs the input listener.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void Deregister(InputComponent* in);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void KeyboardManager::ProcessKeyEvents();
	///
	/// \brief	Processes input events and handles necessary callbacks.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void ProcessKeyEvents();

private:
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \typedef	std::map<AZUL_KEY, KeyHandler*> KeyHandlerMap
	///
	/// \brief	Defines an alias representing a map of keys and associated input handlers.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	typedef std::map<AZUL_KEY, KeyHandler*> KeyHandlerMap;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \typedef	KeyHandlerMap::iterator KeyMapRef
	///
	/// \brief	Defines an alias representing a key's location on the key handler map for efficient removal.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	typedef KeyHandlerMap::iterator KeyMapRef;

	/// \brief	The map of used keys and their input handlers.
	KeyHandlerMap keyMap;
};

#endif
