#ifndef DebugLog_H
#define DebugLog_H

#include <list>

class SpriteFont;
class SpriteString;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	DebugLog
///
/// \brief	A debug tool that logs user-specified information on the display.
///
/// \author	Mike Piunti
/// \date	03/11/2023
////////////////////////////////////////////////////////////////////////////////////////////////////
class DebugLog {
	friend class DebugAttorney;
private:
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	DebugLog::DebugLog(const int x = 0, const int y = 0);
	///
	/// \brief	Constructor. Sets a debug log panel to be placed at the top left corner of the screen.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	DebugLog();
	DebugLog(const DebugLog&) = delete;
	DebugLog& operator=(const DebugLog&) = delete;
	~DebugLog();

	/// \brief	The instance of the debug log.
	static DebugLog* instance;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static DebugLog* DebugLog::Instance();
	///
	/// \brief	Gets the instance of the debug log. Used to create an instance if none exists.
	///
	/// \returns	The current instance of the debug log.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static DebugLog* Instance();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static void DebugLog::Terminate();
	///
	/// \brief	Terminates the debug log.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static void Terminate();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void DebugLog::PrivClear();
	///
	/// \brief	Clears the debug log.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void PrivClear();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void DebugLog::Render();
	///
	/// \brief	Prints the debug log to the screen.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void Render();

	/// \brief	(Immutable) the maximum characters each string may have (including the null terminator).
	static const int MAX_CHARS = 256;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \typedef	std::list<SpriteString*> MessageList
	///
	/// \brief	Defines an alias representing the list of messages to display.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	typedef std::list<SpriteString*> MessageList;

	/// \brief	The buffer used to safely add new strings.
	char buff[MAX_CHARS];

	/// \brief	The font used to print the debug log. This will be loaded automatically.
	SpriteFont* font;

	/// \brief	The x coordinate of the debug log.
	int anchorX;

	/// \brief	The y coordinate of the debug log.
	int anchorY;

	/// \brief	The offset y coordinate. Used to place additional messages after the first.
	int offsetY;

	/// \brief	The list of messages to print.
	MessageList list;

	/// \brief	Whether debug mode is enabled.
	static bool debug;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static void DebugLog::ToggleDebug();
	///
	/// \brief	Toggles debug mode.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static void ToggleDebug();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void DebugLog::PrivAdd();
	///
	/// \brief	Adds the stored message to the debug log.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void PrivAdd();

public:
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static void DebugLog::Add(const char* A, ...);
	///
	/// \brief	Adds a message to the debug log.
	///
	/// \param 	A  	The message to add, as a formatted string.
	/// \param 	...	Variable arguments providing format arguments.
	/// 			
	/// This function works similarly to C standard I/O's printf() function to allow formatting.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static void Add(const char* A, ...);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static void DebugLog::Clear();
	///
	/// \brief	Clears the debug log.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static void Clear();
};

#endif
