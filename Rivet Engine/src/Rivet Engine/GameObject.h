#ifndef GameObject_H
#define GameObject_H

#include <map>

#include "CollisionUpdateAttorney.h"
#include "ComponentIncludes.h"

class Model;
class NullDraw;
class NullUpdate;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	GameObject
///
/// \brief	A manager of the different components that make up a game object.
///
/// \author	Mike Piunti
/// \date	05/17/2023
////////////////////////////////////////////////////////////////////////////////////////////////////
class GameObject {
public:
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \typedef	std::string Key
	///
	/// \brief	Defines an alias representing the key a component is stored with.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	typedef std::string Key;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	GameObject::GameObject(ISpawnCallback* sc);
	///
	/// \brief	Constructor. Creates a new game object using the given spawn callback.
	///
	/// \param	sc	The derived spawn callback.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	GameObject(ISpawnCallback* sc);

	GameObject() = delete;
	GameObject(const GameObject&) = delete;
	GameObject& operator=(const GameObject&) = delete;
	~GameObject();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::AddAlarm(Key k, IAlarmCallback* cb, const float time);
	///
	/// \brief	Adds an alarm component to the game object.
	///
	/// \param	k   	The string key used to store and recall the new component.
	/// \param	cb  	The derived callback.
	/// \param	time	The relative time until the alarm triggers.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void AddAlarm(Key k, IAlarmCallback* cb, const float time);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::RemoveAlarm(Key k);
	///
	/// \brief	Removes the alarm stored with the given key.
	///
	/// \param	k	The key for the alarm to remove.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void RemoveAlarm(Key k);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::SetAlarm(Key k);
	///
	/// \brief	Allows an alarm to trigger.
	///
	/// \param 	k	The key for the alarm to set.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void SetAlarm(Key k);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::CancelAlarm(Key k);
	///
	/// \brief	Stops an alarm from triggering.
	///
	/// \param 	k	The key for the alarm to cancel.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void CancelAlarm(Key k);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::ResetAlarm(Key k, const float time);
	///
	/// \brief	Resets the alarm stored with the given key to go off in the specified time.
	///
	/// \param	k   	The string key used to store and recall the new component.
	/// \param	time	The relative time until the alarm triggers.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void ResetAlarm(Key k, const float time);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::ClearAlarms();
	///
	/// \brief	Removes all alarm components.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void ClearAlarms();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::AddCollision(Key k, CollisionComponent* cb);
	///
	/// \brief	Adds a collision component to the game object.
	///
	/// \param	k   	The string key used to store and recall the new component.
	/// \param	cb  	The derived callback.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void AddCollision(Key k, CollisionComponent* c);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::RemoveCollision(Key k);
	///
	/// \brief	Removes the collision stored with the given key.
	///
	/// \param	k	The key for the alarm to remove.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void RemoveCollision(Key k);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::EnableCollision();
	///
	/// \brief	Enables collision on this game object.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void EnableCollision();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::DisableCollision();
	///
	/// \brief	Disables collision on this game object.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void DisableCollision();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::SetCollider(Key k, Model* mod, CollisionComponent::Volume type);
	///
	/// \brief	Sets the model and volume to use for collision processing on the component stored with the given key.
	///
	/// \param	k		The key for the collision to set.
	/// \param	model	The collider model.
	/// \param	type	The desired type of collision volume to use for processing.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void SetCollider(Key k, Model* mod, CollisionComponent::Volume type);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::UpdateCollisionData(Key k, const Matrix& w);
	///
	/// \brief	Updates the collision data using the given world matrix.
	/// 		Used to correctly calculate collision based on objects' world matrices.
	///
	/// \param	k	The key for the collision to update.
	/// \param 	w	The world matrix of the object's GraphicsObject.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void UpdateCollisionData(Key k, const Matrix& w);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::ClearCollision();
	///
	/// \brief	Removes all collision components.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void ClearCollision();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::AddDraw(Key k, IDrawCallback* cb);
	///
	/// \brief	Adds a draw component to the game object.
	///
	/// \param	k   	The string key used to store and recall the new component.
	/// \param	cb  	The derived callback.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void AddDraw(Key k, IDrawCallback* cb);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::RemoveDraw(Key k);
	///
	/// \brief	Removes the draw component stored with the given key.
	///
	/// \param	k	The key for the draw component to remove.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void RemoveDraw(Key k);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::SetCurrentDraw(Key k);
	///
	/// \brief	Sets the current draw component. Used for objects that can change graphics.
	///
	/// \param 	k	The key for the draw component to use.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void SetCurrentDraw(Key k);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::ClearDraws();
	///
	/// \brief	Removes all draw components.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void ClearDraws();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::AddInput(AZUL_KEY k, KeyboardManager::EventType et, IInputCallback* cb);
	///
	/// \brief	Adds a specialized input listener to the game object.
	///
	/// \param	k	The keyboard key to listen for.
	/// \param	et	The type of keyboard event (ie. press or release).
	/// \param	cb	The derived callback.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void AddInput(AZUL_KEY k, KeyboardManager::EventType et, IInputCallback* cb);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::RemoveInput(AZUL_KEY k, KeyboardManager::EventType et);
	///
	/// \brief	Removes the input listener using the given key and event type.
	///
	/// \param 	k 	The keyboard key the listener uses.
	/// \param 	et	The event type listened for.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void RemoveInput(AZUL_KEY k, KeyboardManager::EventType et);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::EnableInput(AZUL_KEY k, KeyboardManager::EventType et);
	///
	/// \brief	Enables the input listener using the given key and event type.
	///
	/// \param 	k 	The keyboard key the listener uses.
	/// \param 	et	The event type listened for.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void EnableInput(AZUL_KEY k, KeyboardManager::EventType et);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::DisableInput(AZUL_KEY k, KeyboardManager::EventType et);
	///
	/// \brief	Disables the input listener using the given key and event type.
	///
	/// \param 	k 	The keyboard key the listener uses.
	/// \param 	et	The event type listened for.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void DisableInput(AZUL_KEY k, KeyboardManager::EventType et);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::ClearInputs();
	///
	/// \brief	Removes all specialized inputs.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void ClearInputs();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::AddUpdate(Key k, IUpdateCallback* cb);
	///
	/// \brief	Adds an update component to the game object.
	///
	/// \param	k   	The string key used to store and recall the new component.
	/// \param	cb  	The derived callback.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void AddUpdate(Key k, IUpdateCallback* cb);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::RemoveUpdate(Key k);
	///
	/// \brief	Removes the update component stored with the given key.
	///
	/// \param	k	The key for the update component to remove.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void RemoveUpdate(Key k);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::SetCurrentUpdate(Key k);
	///
	/// \brief	Sets the current update component. Used for objects that can change graphics.
	///
	/// \param 	k	The key for the update component to use.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void SetCurrentUpdate(Key k);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::ClearUpdates();
	///
	/// \brief	Removes all update components.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void ClearUpdates();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	template <typename C> void GameObject::SetCollisionGroup()
	///
	/// \brief	Sets the collision group for the object owning this game object.
	///
	/// \tparam	C	The owner object's type.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	template <typename C>
	void SetCollisionGroup() {
		for (auto it = colliders.begin(); it != colliders.end(); it++)
			CollisionUpdateAttorney::SetCollisionGroup<C>(it->second);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::Spawn();
	///
	/// \brief	Spawns this object into the game world.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void Spawn();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void GameObject::Despawn();
	///
	/// \brief	Despawns this object from the game world.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void Despawn();

private:
	/// \brief	A draw component that does nothing.
	NullDraw* nullDraw;

	/// \brief	An update component that does nothing.
	NullUpdate* nullUpdate;

	/// \brief	The current draw component.
	DrawComponent* currDraw;

	/// \brief	The current update component.
	UpdateComponent* currUpdate;

	/// \brief	The spawn component.
	SpawnComponent* spawn;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \typedef	std::map<Key, AlarmComponent*> AlarmMap
	///
	/// \brief	Defines an alias representing the storage map for alarms.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	typedef std::map<Key, AlarmComponent*> AlarmMap;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \typedef	std::map<Key, CollisionComponent*> CollisionMap
	///
	/// \brief	Defines an alias representing the storage map for collision components.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	typedef std::map<Key, CollisionComponent*> CollisionMap;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \typedef	std::map<Key, DrawComponent*> DrawMap
	///
	/// \brief	Defines an alias representing the storage map for draw components.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	typedef std::map<Key, DrawComponent*> DrawMap;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \typedef	std::map<KeyboardManager::InputEvent, InputComponent*> InputMap
	///
	/// \brief	Defines an alias representing the storage map for input components.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	typedef std::map<KeyboardManager::InputEvent, InputComponent*> InputMap;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \typedef	std::map<Key, UpdateComponent*> UpdateMap
	///
	/// \brief	Defines an alias representing the storage map for update components.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	typedef std::map<Key, UpdateComponent*> UpdateMap;

	/// \brief	The storage map for alarms.
	AlarmMap alarms;

	/// \brief	The storage map for collider components.
	CollisionMap colliders;
	
	/// \brief	The storage map for draw components.
	DrawMap draws;
	
	/// \brief	The storage map for input components.
	InputMap inputs;
	
	/// \brief	The storage map for update components.
	UpdateMap updates;
};

#endif
