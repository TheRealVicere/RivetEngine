#ifndef Component_H
#define Component_H

#include "RegistrationState.h"

class Command;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	Component
///
/// \brief	A game object component used to add functionality to objects.
///
/// \author	Mike Piunti
/// \date	04/12/2023
////////////////////////////////////////////////////////////////////////////////////////////////////
class Component {
	friend class RegistryAttorney;

public:
	Component();
	Component(const Component&) = delete;
	Component& operator=(const Component&) = delete;
	virtual ~Component();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	virtual void Component::Enable();
	///
	/// \brief	Enables this component for use in a scene.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void Enable();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	virtual void Component::Disable();
	///
	/// \brief	Disables this component for use in a scene.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void Disable();

protected:
	/// \brief	The registration state for this component.
	RegistrationState regState;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	virtual void Component::OnRegistration() = 0;
	///
	/// \brief	Adds a specialized component to its manager's registry.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void OnRegistration() = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	virtual void Component::OnDeregistration() = 0;
	///
	/// \brief	Removes a specialized component from its manager's registry.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void OnDeregistration() = 0;

private:
	/// \brief	The command used to register this component to a scene.
	Command* regCmd;

	/// \brief	The command used to deregister this component from a scene.
	Command* deregCmd;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void Component::Register();
	///
	/// \brief	Registers this component for use.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void Register();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void Component::Deregister();
	///
	/// \brief	Deregisters this component for use.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void Deregister();
};

#endif
