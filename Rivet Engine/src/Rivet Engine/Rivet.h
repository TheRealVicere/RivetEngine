#ifndef RIVET_H
#define RIVET_H

#include "AzulCore.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	Rivet
///
/// \brief	The main Rivet Engine class. Responsible for running the game.
///
/// Rivet Engine is a game engine used to design and develop tank games. It is intended to be user-
/// friendly, intuitive, and easy to use while offering some freedom for implementation.
/// 
/// \author	Mike Piunti
/// \date	02/28/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class Rivet: public Engine
{
public:
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static void Rivet::Run();
	///
	/// \brief	Runs the game.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static void Run();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static void Rivet::Terminate();
	///
	/// \brief	Ends the game.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static void Terminate();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static int Rivet::GetWidth();
	///
	/// \brief	Gets the width of the game window or device screen.
	///
	/// \returns	The width of the render area.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static int GetWidth();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static int Rivet::GetHeight();
	///
	/// \brief	Gets the height of the game window or device screen.
	///
	/// \returns	The height of the render area.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static int GetHeight();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static void Rivet::SetWindowTitle(const std::string title);
	///
	/// \brief	Sets the window title.
	///
	/// \param 	title	The title.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static void SetWindowTitle(const std::string title);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static void Rivet::SetWidthHeight(const int w, const int h);
	///
	/// \brief	Sets the width and height of the render area, in pixels.
	///
	/// \param 	w	The width of the render area, in pixels.
	/// \param 	h	The height of the render area, in pixels.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static void SetWidthHeight(const int w, const int h);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static void Rivet::SetTransparency(float r, float g, float b, float a);
	///
	/// \brief	Sets a background color to represent transparency.
	///
	/// \param 	r	The color's red channel, from 0 to 1.
	/// \param 	g	The color's green channel, from 0 to 1.
	/// \param 	b	The color's blue channel, from 0 to 1.
	/// \param 	a	The color's alpha channel, from 0 to 1.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static void SetTransparency(float r, float g, float b, float a);
	
private:
	Rivet() = default;
	Rivet(const Rivet&) = delete;
	Rivet& operator=(const Rivet&) = delete;
	~Rivet() = default;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	Rivet::Rivet(const char* windowName, const int Width, const int Height);
	///
	/// \brief	Legacy constructor. Has been deprecated.
	/// \deprecated Users should not instantiate the engine. Use SetWindowTitle() and SetWidthHeight() instead.
	///
	/// \param 	windowName	Name of the window.
	/// \param 	Width	  	The width.
	/// \param 	Height	  	The height.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	Rivet(const char* windowName, const int Width, const int Height);

	/// \brief	The current engine instance.
	static Rivet* instance;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	static Rivet* Rivet::Instance();
	///
	/// \brief	Gets the current engine instance. Creates a new one if none exists.
	///
	/// \returns	The current engine instance.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static Rivet* Instance();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	virtual void Rivet::Initialize();
	///
	/// \brief	Initializes the game and underlying engine.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void Initialize();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	virtual void Rivet::LoadContent();
	///
	/// \brief	Loads all game assets and starts the initial scene.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void LoadContent();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	virtual void Rivet::Update();
	///
	/// \brief	Processes all registry commands, time commands, object updates, collision handling, scene
	/// 		changes, and inputs.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void Update();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	virtual void Rivet::Draw();
	///
	/// \brief	Draws all game objects and, if in debug mode, their bounding spheres.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void Draw();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	virtual void Rivet::UnLoadContent();
	///
	/// \brief	Quits the game, unloads all assets, and performs final cleanup before shutdown.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void UnLoadContent();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void Rivet::LoadResources();
	///
	/// \brief	Loads any specified assets and sets the starting scene.
	/// 		
	/// Users define this method in LoadAllResources.cpp to suit their needs.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void LoadResources();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void Rivet::GameStart();
	///
	/// \brief	Performs one-time operations for the game to start.
	/// 		
	/// Users define this method in GameStart.cpp to suit their needs.
	/// The window title and dimensions should be set here.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void GameStart();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void Rivet::GameEnd();
	///
	/// \brief	Performs final cleanup before the application closes.
	/// 		
	/// Users define this method in GameEnd.cpp to suit their needs.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void GameEnd();
};

#endif