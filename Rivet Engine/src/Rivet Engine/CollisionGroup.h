#ifndef CollisionGroup_H
#define CollisionGroup_H

#include <list>

#include "AABB.h"

class CollisionComponent;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	CollisionGroup
///
/// \brief	A group of collidable objects of the same type.
///
/// \author	Mike Piunti
/// \date	02/28/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class CollisionGroup {
public:
	CollisionGroup() = default;
	CollisionGroup(const CollisionGroup&) = delete;
	CollisionGroup& operator=(const CollisionGroup&) = delete;
	~CollisionGroup();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \typedef	std::list<CollisionComponent*> CollisionComponentList
	///
	/// \brief	Defines an alias representing a list of collidables of a specific type.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	typedef std::list<CollisionComponent*> CollisionComponentList;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \typedef	CollisionComponentList::iterator ColliderListRef
	///
	/// \brief	Defines an alias representing a reference to a collidable's location on the list.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	typedef CollisionComponentList::iterator ColliderListRef;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	const CollisionComponentList& CollisionGroup::GetCollisionComponentList();
	///
	/// \brief	Gets the list of collidables.
	///
	/// \returns	The collidable list.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	const CollisionComponentList& GetCollisionComponentList();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	ColliderListRef CollisionGroup::Register(CollisionComponent* c);
	///
	/// \brief	Adds an object to the collidable list.
	///
	/// \param	c	The object to add.
	///
	/// \returns	A reference to the collidable's location on the list for efficient deletion.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	ColliderListRef Register(CollisionComponent* c);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void CollisionGroup::Deregister(CollisionComponent* c);
	///
	/// \brief	Removes an object from the collidable list.
	///
	/// \param	c	The object to remove.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void Deregister(CollisionComponent* c);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void CollisionGroup::UpdateGroupPartition();
	///
	/// \brief	Updates the partition holding all members of this group.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void UpdateGroupPartition();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	const AABB& CollisionGroup::GetPartition();
	///
	/// \brief	Returns the partition holding all members of this group.
	///
	/// \returns	The partition.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	const AABB& GetPartition();

private:
	/// \brief	The list of collidables of a specific type.
	CollisionComponentList list;

	/// \brief	The partition holding all members of this group.
	AABB partition;
};

#endif
