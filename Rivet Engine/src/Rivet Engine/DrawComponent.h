#ifndef DrawComponent_H
#define DrawComponent_H

#include "Component.h"
#include "DrawManager.h"

class IDrawCallback;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	DrawComponent
///
/// \brief	Allows game objects to be rendered to the display.
///
/// \author	Mike Piunti
/// \date	02/28/2023
////////////////////////////////////////////////////////////////////////////////////////////////////
class DrawComponent : public Component {
	friend class DrawAttorney;
public:
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	DrawComponent::DrawComponent(IDrawCallback* cb);
	///
	/// \brief	Creates a draw component using the given callback.
	///
	/// \param	cb	The callback carrying out the actual draw operation.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	DrawComponent(IDrawCallback* cb);

	DrawComponent() = delete;
	DrawComponent(const DrawComponent&) = delete;
	DrawComponent& operator=(const DrawComponent&) = delete;
	~DrawComponent() = default;

private:
	/// \brief	The callback carrying out the actual draw operation.
	IDrawCallback* callback;

	/// \brief	A reference to the object's location on the draw list for efficient deletion.
	DrawManager::StorageListRef ref;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	DrawManager::StorageListRef& DrawComponent::GetStorageListRef();
	///
	/// \brief	Gets a reference to the object's location on the draw list.
	///
	/// \returns	The draw list reference.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	DrawManager::StorageListRef& GetStorageListRef();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void DrawComponent::OnRegistration();
	///
	/// \brief	Registers this object for drawing.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void OnRegistration();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void DrawComponent::OnDeregistration();
	///
	/// \brief	Deregisters this object for drawing.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void OnDeregistration();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	virtual void DrawComponent::Draw()
	///
	/// \brief	Renders this object's 3D models on the screen.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void Draw();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	virtual void DrawComponent::Draw2D()
	///
	/// \brief	Renders this object's sprites on the screen.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void Draw2D();
};

#endif
