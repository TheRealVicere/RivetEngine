#ifndef BSphere_H
#define BSphere_H

#include "Vect.h"

#include "CollisionVolume.h"

class AABB;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	BSphere
///
/// \brief	A sphere surrounding an object with collision functionality. Used for collision testing.
///
/// \author	Mike Piunti
/// \date	02/28/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class BSphere : public CollisionVolume {
public:
	BSphere();
	BSphere(const BSphere& other);
	BSphere& operator=(const BSphere& other);
	~BSphere() = default;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void BSphere::ComputeData(Model* mod, const Matrix& mat);
	///
	/// \brief	Calculates the data used to place the bounding sphere correctly.
	///
	/// \param	mod	The object's collider model.
	/// \param 	mat	The object's world matrix.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void ComputeData(Model* mod, const Matrix& mat);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void BSphere::DebugView(const Vect& col);
	///
	/// \brief	Renders the sphere to the display for debugging purposes.
	///
	/// \param 	col	The color used to render the sphere.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void DebugView(const Vect& col) const override;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	bool BSphere::Intersect(const Vect& p) const;
	///
	/// \brief	Checks if a point lies within this bounding sphere.
	///
	/// \param 	p	The point to test for intersection.
	///
	/// \returns	True if this sphere contains the point, false if not.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	bool Intersect(const Vect& p) const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	bool BSphere::Intersect(const CollisionVolume& other) const;
	///
	/// \brief	Tests whether this bounding sphere intersects another collision volume.
	///
	/// \param 	other	The other collision volume to test for intersection.
	///
	/// \returns	True if the volumes intersect, false otherwise.
	/////////////////////////////////////////////////////////////////////////////////////////////////
	bool Intersect(const CollisionVolume& other) const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	bool BSphere::Intersect(const BSphere& other) const;
	///
	/// \brief	Tests whether this bounding sphere intersects another bounding sphere.
	///
	/// \param 	other	The other bounding sphere to test for intersection.
	///
	/// \returns	True if the bounding spheres intersect, false otherwise.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	bool Intersect(const BSphere& other) const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	bool BSphere::Intersect(const CollisionBox& other) const;
	///
	/// \brief	Tests whether this bounding sphere intersects a collision box.
	///
	/// \param 	other	The collision box to test for intersection.
	///
	/// \returns	True if the volumes intersect, false otherwise.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	bool Intersect(const CollisionBox& other) const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	const float BSphere::Radius() const;
	///
	/// \brief	Gets the radius of the bounding sphere.
	///
	/// \returns	The radius.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	const float Radius() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	const Vect& BSphere::Center() const;
	///
	/// \brief	Gets the center point of the bounding sphere.
	///
	/// \returns	The center.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	const Vect& Center() const;

private:
	/// \brief	The bounding sphere's center point.
	Vect center;

	/// \brief	The bounding sphere's radius.
	float radius;
};

#endif
