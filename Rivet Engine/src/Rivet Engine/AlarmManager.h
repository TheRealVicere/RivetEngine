#ifndef AlarmManager_H
#define AlarmManager_H

#include <map>

class AlarmComponent;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	AlarmManager
///
/// \brief	A manager for alarm functionality in game objects.
///
/// \author	Mike Piunti
/// \date	02/28/2023
////////////////////////////////////////////////////////////////////////////////////////////////////
class AlarmManager {
private:
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \typedef	std::multimap<float, AlarmComponent*> Timeline
	///
	/// \brief	Defines an alias representing a timeline of alarms.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	typedef std::multimap<float, AlarmComponent*> Timeline;

	/// \brief	The timeline of alarm events.
	Timeline timeline;

public:
	AlarmManager() = default;
	AlarmManager(const AlarmManager&) = delete;
	AlarmManager& operator=(const AlarmManager&) = delete;
	~AlarmManager();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \typedef	Timeline::iterator TimelineRef
	///
	/// \brief	Defines an alias representing a reference to an alarm's position on the timeline.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	typedef Timeline::iterator TimelineRef;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void AlarmManager::ProcessElements();
	///
	/// \brief	Processes alarms for callbacks until all alarms still have yet to be called.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void ProcessElements();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	TimelineRef AlarmManager::Register(AlarmComponent* a);
	///
	/// \brief	Adds an alarm event to the timeline.
	///
	/// \param	a 	The object whose alarm to add.
	///
	/// \returns	A reference to the alarm event's location on the timeline. Used for efficient removal.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	TimelineRef Register(AlarmComponent* a);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void AlarmManager::Deregister(AlarmComponent* a);
	///
	/// \brief	Removes an alarm component from the timeline.
	///
	/// \param	a 	The alarm component to remove.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void Deregister(AlarmComponent* a);
};

#endif
