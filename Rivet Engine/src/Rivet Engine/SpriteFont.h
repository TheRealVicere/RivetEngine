#ifndef SpriteFont_H
#define SpriteFont_H

#include <map>
#include <string>
#include <xmllite.h>

#include "Sprite.h"

class Texture;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	SpriteFont
///
/// \brief	A text font broken down into sprites ("glyphs") of each character, used for text display.
///
/// \author	Mike Piunti
/// \date	03/06/2023
////////////////////////////////////////////////////////////////////////////////////////////////////
class SpriteFont
{
public:
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \typedef	int Key
	///
	/// \brief	Defines an alias representing the Unicode value of a character in a corresponding glyph.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	typedef int Key;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \typedef	Sprite Glyph
	///
	/// \brief	Redefines sprites to strictly represent glyphs for the purposes of this class.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	typedef Sprite Glyph;

private:
	/// \brief	The name of the font in use.
	std::string name;

	/// \brief	The font texture.
	Texture* fontTexture;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \typedef	std::map<Key, Glyph*> FontMap
	///
	/// \brief	Defines an alias representing a map of Unicode values and the glyphs of their corresponding characters.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	typedef std::map<Key, Glyph*> FontMap;

	/// \brief	The map of Unicode values and the glyphs of their corresponding characters.
	FontMap fontMap;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void SpriteFont::XMLtoCollection(std::string filename);
	///
	/// \brief	Parses the sprite XML file from a font texture file.
	///
	/// \param 	filename	Relative path to the font texture file.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void XMLtoCollection(std::string filename);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void SpriteFont::ElementTextToInt(IXmlReader* pReader, int& out);
	///
	/// \brief	Reads & converts an XML attribute into an integer value.
	///
	/// \param	reader	The XML reader.
	/// \param	out	   	The XML attribute, as an integer.
	////////////////////////////////////////////////////////////////////////////////////////////////////s
	void ElementTextToInt(IXmlReader* reader, int& out);

public:
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	SpriteFont::SpriteFont(std::string path);
	///
	/// \brief	Constructor. Takes a font file and creates a SpriteFont from it.
	///
	/// \param 	path	Relative pathname of the texture file. Starts in the project's Assets\Textures\Fonts folder.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	SpriteFont(std::string path);

	SpriteFont() = delete;
	~SpriteFont();
	SpriteFont(const SpriteFont&) = delete;
	SpriteFont& operator=(const SpriteFont&) = delete;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	Glyph* SpriteFont::GetGlyph(char c);
	///
	/// \brief	Gets a glyph to print to the display.
	///
	/// \param 	c	The character to print.
	///
	/// \returns	The glyph corresponding to the given character.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	Glyph* GetGlyph(char c);
};

#endif _SpriteFont