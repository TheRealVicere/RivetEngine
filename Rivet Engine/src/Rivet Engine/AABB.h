#ifndef AABB_H
#define AABB_H

#include "CollisionBox.h"

class BSphere;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	AABB
///
/// \brief	An axis-aligned box surrounding an object with collision functionality. Used for collision testing.
///
/// \author	Mike Piunti
/// \date	04/11/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class AABB : public CollisionBox {
public:
	AABB();
	AABB(const CollisionBox& other);
	AABB& operator=(const CollisionBox& other);
	~AABB() = default;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void AABB::ComputeData(Model* mod, const Matrix& mat);
	///
	/// \brief	Calculates the data used to place the AABB correctly.
	///
	/// \param	mod	The object's collider model.
	/// \param 	mat	The object's world matrix.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void ComputeData(Model* mod, const Matrix& mat);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void AABB::DebugView(const Vect& col);
	///
	/// \brief	Renders the AABB to the display for debugging purposes.
	///
	/// \param 	col	The color used to render the AABB.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void DebugView(const Vect& col) const override;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	bool AABB::Intersect(const Vect& p) const;
	///
	/// \brief	Checks if a point lies within this AABB.
	///
	/// \param 	p	The point to test for intersection.
	///
	/// \returns	True if this AABB contains the point, false if not.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	bool Intersect(const Vect& p) const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	bool AABB::Intersect(const CollisionVolume& other) const;
	///
	/// \brief	Tests whether this AABB intersects another collision volume.
	///
	/// \param 	other	The other collision volume to test for intersection.
	///
	/// \returns	True if the volumes intersect, false otherwise.
	/////////////////////////////////////////////////////////////////////////////////////////////////
	bool Intersect(const CollisionVolume& other) const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	bool AABB::Intersect(const BSphere& other) const;
	///
	/// \brief	Tests whether this AABB intersects a bounding sphere.
	///
	/// \param 	other	The bounding sphere to test for intersection.
	///
	/// \returns	True if the volumes intersect, false otherwise.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	bool Intersect(const BSphere& other) const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void AABB::Set(const Vect& _min, const Vect& _max);
	///
	/// \brief	Sets the AABB based on the given min and max points.
	///
	/// \param 	_min	The minimum point of the AABB.
	/// \param 	_max	The maximum point of the AABB.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void Set(const Vect& _min, const Vect& _max);
};

#endif
