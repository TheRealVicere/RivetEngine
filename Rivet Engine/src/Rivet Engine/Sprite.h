#ifndef Sprite_H
#define Sprite_H

#include <string>

class Camera;
class GraphicsObject_Sprite;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	Sprite
///
/// \brief	An image used as a model for a game object.
///
/// \author	Mike Piunti
/// \date	03/01/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class Sprite {
public:
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	Sprite::Sprite(std::string key);
	///
	/// \brief	Constructor. Creates a sprite using the requested image file.
	///
	/// \param 	key	The key used to store the image the sprite will use.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	Sprite(std::string key);

	Sprite() = delete;
	Sprite(const Sprite&) = delete;
	Sprite& operator=(const Sprite&) = delete;
	~Sprite();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	float Sprite::GetAngle();
	///
	/// \brief	Gets the sprite's rotation angle.
	///
	/// \returns	The rotation angle, in radians.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	float GetAngle();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	float Sprite::GetAngleDeg();
	///
	/// \brief	Gets the sprite's rotation angle.
	///
	/// \returns	The rotation angle, in degrees.
	/// 			
	/// The angle is stored in radians, so floating-point inaccuracies may result.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	float GetAngleDeg();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void Sprite::SetAngle(const float a);
	///
	/// \brief	Sets the sprite's rotation angle.
	///
	/// \param 	a	The new angle, in radians.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void SetAngle(const float a);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void Sprite::SetAngleDeg(const float a);
	///
	/// \brief	Sets the sprite's rotation angle.
	///
	/// \param 	a	The new angle, in degrees.
	/// 			
	/// The angle will be stored in radians, so floating-point inaccuracies may result.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void SetAngleDeg(const float a);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void Sprite::SetCenter(const float dx, const float dy);
	///
	/// \brief	Sets the relative center of the sprite.
	///
	/// \param 	dx	The x position of the center.
	/// \param 	dy	The y position of the center.
	/// 			
	/// Both dx and dy should use the image coordinates for the sprite, not the screen coordinates.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void SetCenter(const float dx, const float dy);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void Sprite::SetPosition(const float x, const float y);
	///
	/// \brief	Sets the sprite's position on the screen.
	///
	/// \param 	x	The x coordinate.
	/// \param 	y	The y coordinate.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void SetPosition(const float x, const float y);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void Sprite::SetScaleFactor(float scalex, float scaley);
	///
	/// \brief	Scales the sprite using the given factor.
	///
	/// \param 	scalex	The x-axis scale.
	/// \param 	scaley	The y-axis scale.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void SetScaleFactor(float scalex, float scaley);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void Sprite::SetScalePixel(float w, float h);
	///
	/// \brief	Sets the sprite's exact dimensions.
	///
	/// \param 	w	The new width.
	/// \param 	h	The new height.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void SetScalePixel(float w, float h);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	float Sprite::GetHeight();
	///
	/// \brief	Gets the height of the sprite.
	///
	/// \returns	The height.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	float GetHeight();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	float Sprite::GetWidth();
	///
	/// \brief	Gets the width of the sprite.
	///
	/// \returns	The width.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	float GetWidth();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void Sprite::Render(Camera* c);
	///
	/// \brief	Renders the sprite to the screen.
	///
	/// \param	c	The camera used for rendering.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void Render(Camera* c);

private:
	/// \brief	The box enclosing the sprite.
	GraphicsObject_Sprite* model;

	/// \brief	The angle of rotation.
	float angle;

	/// \brief	The local x coordinate of the sprite's center.
	float centerX;

	/// \brief	The local y coordinate of the sprite's center.
	float centerY;

	/// \brief	The x-axis scale. Defaults to 1.
	float scaleX;

	/// \brief	The y-axis scale. Defaults to 1.
	float scaleY;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void Sprite::UpdateWorldMatrix();
	///
	/// \brief	Updates the model's world matrix
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void UpdateWorldMatrix();
};

#endif
